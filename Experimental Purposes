local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local player = game.Players.LocalPlayer 
local character = player.Character
local RS = game:GetService("RunService")
local Http = game:GetService("HttpService")

local Window = Library:CreateWindow({
    Title = 'Ezota Premium | Version 1.0.0 | '..player.Name,
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Movement = Window:AddTab('Movement'),
    Visuals = Window:AddTab('Visuals'),
    Development = Window:AddTab('Development'),
    Trolling = Window:AddTab('Trolling'),
    Games = Window:AddTab('Games'),
    Settings = Window:AddTab('Settings'),
}

local LeftGroupBox = Tabs.Movement:AddLeftGroupbox('Simple Movement')
local TabBox = Tabs.Movement:AddRightTabbox()
local AdvMove = TabBox:AddTab('Advanced')
local ByMove = TabBox:AddTab('Bypassed') -- BodyVelocity (Gravity), Jump (JumpHeight/JumpPower), Fly (CFrame Teleports), Walk (CFrame Teleports), 

LeftGroupBox:AddToggle('WS Toggle', {
    Text = 'Enable Walkspeed',
    Default = false,
    Tooltip = 'Enable this Toggle to toggle the Walkspeed',
    Callback = function(Value)
        local OGWS = Instance.new("NumberValue", character.Humanoid)
        OGWS.Name = "Original WalkSpeed"
        OGWS.Value = character.Humanoid.WalkSpeed
        _G.WS = Value
    end
})

LeftGroupBox:AddInput('WS Textbox', {
    Default = character.Humanoid.WalkSpeed,
    Numeric = true,
    Finished = true,

    Text = 'Walkspeed',
    Tooltip = 'Type a number in here to change your Walkspeed',
    Placeholder = 'Walkspeed...',

    Callback = function(Value)
        RS.Heartbeat:Connect(function()
            if _G.WS == true then
                character.Humanoid.WalkSpeed = Value
            else
                character.Humanoid.WalkSpeed = character.Humanoid:FindFirstChild("Original WalkSpeed").Value
            end
        end)
    end
})

LeftGroupBox:AddToggle('JP Toggle', {
    Text = 'Enable Jumppower',
    Default = false,
    Tooltip = 'Enable this Toggle to toggle the Jumppower',
    Callback = function(Value)
        local OGJP = Instance.new("NumberValue", character.Humanoid)
        OGJP.Name = "Original JumpPower"
        OGJP.Value = character.Humanoid.JumpPower
        _G.JP = Value
    end
})

LeftGroupBox:AddInput('JP Textbox', {
    Default = character.Humanoid.JumpPower,
    Numeric = true,
    Finished = true,

    Text = 'Jumppower',
    Tooltip = 'Type a number in here to change your Jumppower',
    Placeholder = 'Jumppower...',

    Callback = function(Value)
        RS.Heartbeat:Connect(function()
            if _G.JP == true then
                character.Humanoid.JumpPower = Value
            else
                character.Humanoid.JumpPower = character.Humanoid:FindFirstChild("Original JumpPower").Value
            end
        end)
    end
})

LeftGroupBox:AddToggle('InfJump', {
    Text = 'InfJump',
    Default = false,
    Tooltip = 'Enable this Toggle to infinitely Jump',
    Callback = function(Value)
        game:GetService("UserInputService").InputBegan:Connect(function(input, isProcessed)
            if input.KeyCode == Enum.KeyCode.Space and not isProcessed then
                if Value == true then
                    character:FindFirstChildOfClass("Humanoid"):ChangeState(Enum.HumanoidStateType.Jumping)
                else return end
            end
        end)
    end
})

LeftGroupBox:AddToggle('HH Toggle', {
    Text = 'Enable HipHeight',
    Default = false,
    Tooltip = 'Enable this Toggle to toggle the HipHeight',
    Callback = function(Value)
        local OGHH = Instance.new("NumberValue", character.Humanoid)
        OGHH.Name = "Original HipHeight"
        OGHH.Value = character.Humanoid.HipHeight
        _G.HH = Value
    end
})

LeftGroupBox:AddInput('HH Textbox', {
    Default = character.Humanoid.HipHeight,
    Numeric = true,
    Finished = true,

    Text = 'HipHeight',
    Tooltip = 'Type a number in here to change your HipHeight',
    Placeholder = 'HipHeight...',

    Callback = function(Value)
        RS.Heartbeat:Connect(function()
            if _G.HH == true then
                character.Humanoid.HipHeight = Value
            else
                character.Humanoid.HipHeight = character.Humanoid:FindFirstChild("Original HipHeight").Value
            end
        end)
    end
})

LeftGroupBox:AddToggle('NC Toggle', {
    Text = 'NoClip',
    Default = false,
    Tooltip = 'Enable this Toggle to noclip',
    Callback = function(Value)
        RS.Heartbeat:Connect(function()
            if Value == true then
                for i,v in pairs(character:GetDescendants()) do
                    if v:IsA("BasePart") or v:IsA("MeshPart") or v:IsA("Part") and v.CanCollide == true then
                        v.CanCollide = false
                    end
                end
            else
                if character.HumanoidRootPart.CanCollide == false then
                    character.HumanoidRootPart.CanCollide = true
                end
            end
        end)
    end
})

AdvMove:AddLabel('Keybind'):AddKeyPicker('KeyPicker', {
    Default = 'J',
    SyncToggleState = false,
    Mode = 'Toggle',

    Text = 'Fly',
    NoUI = false,
    Callback = function(Value)
                local s,f=pcall(function()
                     
                repeat wait() 
                    until game.Players.LocalPlayer and game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:findFirstChild("Head") and game.Players.LocalPlayer.Character:findFirstChild("Humanoid") 
                local mouse = game.Players.LocalPlayer:GetMouse() 
                repeat wait() until mouse
                local plr = game.Players.LocalPlayer 
                local torso = plr.Character.Head 
                local flying = false
                local deb = true 
                local ctrl = {f = 0, b = 0, l = 0, r = 0} 
                local lastctrl = {f = 0, b = 0, l = 0, r = 0} 
                local maxspeed = 1000
                local speed = 50
                     
                function Fly() 
                local bg = Instance.new("BodyGyro", torso) 
                bg.P = 9e4 
                bg.maxTorque = Vector3.new(9e9, 9e9, 9e9) 
                bg.cframe = torso.CFrame 
                local bv = Instance.new("BodyVelocity", torso) 
                bv.velocity = Vector3.new(0,0.1,0) 
                bv.maxForce = Vector3.new(9e9, 9e9, 9e9) 
                repeat wait() 
                torso.Parent.Humanoid.PlatformStand = true 
                if ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0 then 
                speed = speed+.10+(speed/maxspeed) 
                if speed > maxspeed then 
                speed = maxspeed 
                end 
                elseif not (ctrl.l + ctrl.r ~= 0 or ctrl.f + ctrl.b ~= 0) and speed ~= 0 then 
                speed = speed-1 
                if speed < 0 then 
                    speed = 0
                else
                    speed = 50                
                end 
                end 
                if (ctrl.l + ctrl.r) ~= 0 or (ctrl.f + ctrl.b) ~= 0 then 
                bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (ctrl.f+ctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(ctrl.l+ctrl.r,(ctrl.f+ctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
                lastctrl = {f = ctrl.f, b = ctrl.b, l = ctrl.l, r = ctrl.r} 
                elseif (ctrl.l + ctrl.r) == 0 and (ctrl.f + ctrl.b) == 0 and speed ~= 0 then 
                bv.velocity = ((game.Workspace.CurrentCamera.CoordinateFrame.lookVector * (lastctrl.f+lastctrl.b)) + ((game.Workspace.CurrentCamera.CoordinateFrame * CFrame.new(lastctrl.l+lastctrl.r,(lastctrl.f+lastctrl.b)*.2,0).p) - game.Workspace.CurrentCamera.CoordinateFrame.p))*speed 
                else 
                bv.velocity = Vector3.new(0,0.1,0) 
                end 
                bg.cframe = game.Workspace.CurrentCamera.CoordinateFrame * CFrame.Angles(-math.rad((ctrl.f+ctrl.b)*50*speed/maxspeed),0,0) 
                until not flying 
                ctrl = {f = 0, b = 0, l = 0, r = 0} -----------------------
                lastctrl = {f = 0, b = 0, l = 0, r = 0} 
                 bg:Destroy() 
                 bv:Destroy() 
                    plr.Character.Humanoid.PlatformStand = false 
                    speed = 50
                end 
                     
                mouse.KeyDown:connect(function(key) 
                if key:lower() == "j" then 
                if flying then flying = false 
                else 
                flying = true 
                Fly() 
                end 
                elseif key:lower() == "w" then 
                ctrl.f = 1 
                elseif key:lower() == "s" then 
                ctrl.b = -1 
                elseif key:lower() == "a" then 
                ctrl.l = -1 
                elseif key:lower() == "d" then 
                ctrl.r = 1 
                end 
                end) 
                mouse.KeyUp:connect(function(key) 
                if key:lower() == "w" then 
                ctrl.f = 0 
                lastctrl.f=0
                elseif key:lower() == "s" then 
                ctrl.b = 0 
                lastctrl.b=0
                elseif key:lower() == "a" then 
                ctrl.l = 0 
                lastctrl.l=0
                elseif key:lower() == "d" then 
                ctrl.r = 0 
                lastctrl.r=0
                end 
                end)
                Fly()
                end) if not s then print(f)end
    end
})

AdvMove:AddDropdown('Player TP', {
    SpecialType = 'Player',
    Text = 'Teleport to Player',
    Tooltip = 'Select a player to teleport to him',

    Callback = function(Value)
        char.HumanoidRootPart.CFrame = game.Players:FindFirstChild(Value).Character.HumanoidRootPart.CFrame
    end
})

AdvMove:AddToggle('Gravity Toggle', {
    Text = 'Enable Gravity',
    Default = false,
    Tooltip = 'Enable this Toggle to toggle the Gravity',
    Callback = function(Value)
        local OGGravity = Instance.new("NumberValue", character.Humanoid)
        OGGravity.Name = "Original Gravity"
        OGGravity.Value = game.Workspace.Gravity
        _G.Gravity = Value
    end
})

AdvMove:AddInput('Gravity Textbox', {
    Default = game.Workspace.Gravity,
    Numeric = true,
    Finished = true,

    Text = 'Gravity',
    Tooltip = 'Type a number in here to change your Gravity',
    Placeholder = 'Gravity...',

    Callback = function(Value)
        RS.Heartbeat:Connect(function()
            if _G.Gravity == true then
                game.Workspace.Gravity = Value
            else
                game.Workspace.Gravity = character.Humanoid:FindFirstChild("Original Gravity").Value
            end
        end)
    end
})-

local ClickTP = AdvMove:AddButton({
    Text = 'ClickTP Tool',
    Func = function()
        local rp = character.HumanoidRootPart
        local tool = Instance.new("Tool", player.Backpack)
        local mouse = player:GetMouse()
        tool.Name = "ClickTP"
        tool.RequiresHandle = false
        tool.Activated:Connect(function()
        rp.CFrame = CFrame.new(mouse.Hit.X,mouse.Hit.Y + 4,mouse.Hit.Z)
    end)
    end,
    DoubleClick = false,
    Tooltip = 'Click this button to recieve a ClickTP Tool to teleport'
})
